services:
  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      api-server:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  api-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api-server
    command: npm start
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  ping-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ping-worker
    command: npm run start:worker
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - WORKER_TYPE=ping
      - REDIS_URL=${REDIS_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  alert-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alert-worker
    command: npm run start:alerter
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - WORKER_TYPE=alert
      - REDIS_URL=${REDIS_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: timescale/timescaledb:2.11.0-pg14
    container_name: db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      TIMESCALEDB_TELEMETRY: 'off'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vishal -d apimonitor -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --replica-read-only no --requirepass ""
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local
